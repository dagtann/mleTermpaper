## --- define preliminaries -------------------------------------
pred.er.train <- vector('list', length = length(erDvs))
names(pred.er.train) <- erDvs
for(dv in erDvs){            ## extract training data predictions
  for(j in 1:n.folds){         
    summary(
      pred.er.train[[dv]][[paste0('fold', j)]] <- lapply(
        er.train[[dv]][[j]], 
        FUN = function(x){ fitted(x, type = 'probs') }
    )
    )
  }
}
ylevels <- as.character(2:7)               ## dv reference levels

sample.size <- apply(dta.list[[1]][, erDvs], 2, 
  function(x){ sum(!is.na(x)) }
)

absLossTrain <- vector('list', length = length(erDvs)) ## train loss
names(absLossTrain) <- erDvs
absLossTest <- vector('list', length = length(erDvs)) ## test loss  
names(absLossTest) <- erDvs

## --- Training absolute loss -----------------------------------
for(dv in erDvs){
  for(j in 1:n.folds){                      ## consider all folds
    for(i in 1:length(dta.files)){  ## for each fold extract data
      y.train <- er.train[[dv]][[j]][[i]][['model']][, dv]
      y.train <- as.numeric(y.train)     ## and setup a matrix of 
                              ## binary indicators for comparison
      y.mat <- matrix(
        NA, nrow = length(y.train), ncol = length(ylevels)
      )
      colnames(y.mat) <- ylevels
      for(k in ylevels){
        y.mat[, k] <- ifelse(y.train == k, 1, 0)
      }
      absLossTrain[[dv]][[paste0('fold', j)]] <- sum(
        abs(meanArray(pred.er.train[[dv]][[j]])-y.mat)
      )
    }
  }
}
absLossTrain

## --- Test absolute loss ---------------------------------------
for(dv in erDvs){
  for(j in 1:n.folds){                      ## consider all folds
    for(i in 1:length(dta.files)){  ## for each fold extract data
      y.test <- dta.list[[i]][ dta.list[[i]][, 'fold'] == j, dv] 
      y.test <- as.numeric(y.test)       ## and setup a matrix of 
                              ## binary indicators for comparison
      y.mat <- matrix(
        NA, nrow = length(y.test), ncol = length(ylevels)
      )
      colnames(y.mat) <- ylevels
      for(k in ylevels){
        y.mat[, k] <- ifelse(y.test == k, 1, 0)
      }
      absLossTest[[dv]][[paste0('fold', j)]] <- sum(
        abs(meanArray(er.test[[dv]][[j]])-y.mat), na.rm = TRUE
      )
    }
  }
}
absLossTest
rm(i, j, k, dv, y.mat, y.test, y.train)

## --- Proceed to plotting --------------------------------------
pdta <- do.call(rbind.data.frame, absLossTrain)
names(pdta) <- paste0('fold', 1:n.folds)
pdta[, 'depVar'] <- row.names(pdta)
pdta <- reshape2::melt(
  pdta,
  id.vars = 'depVar',
  measure.vars = paste0('fold', 1:10),
  value.name = 'absLossTrain'
)
test.dta <- do.call(rbind.data.frame, absLossTest)
names(test.dta) <- paste0('fold', 1:n.folds)
test.dta[, 'depVar'] <- row.names(test.dta)
test.dta <- reshape2::melt(
  test.dta,
  id.vars = 'depVar',
  measure.vars = paste0('fold', 1:10),
  value.name = 'absLossTest'
)
pdta <- merge(
  x = pdta, y = test.dta, by = c('depVar', 'variable')
)
rm(test.dta)

pdta[, 'size'] <- NA
pdta[, 'size'] <- ifelse(
  pdta[, 'depVar'] == 'lead_fh1', sample.size[1], pdta[, 'size']
)
pdta[, 'size'] <- ifelse(
  pdta[, 'depVar'] == 'lead_fh2', sample.size[2], pdta[, 'size']
)
pdta[, 'size'] <- ifelse(
  pdta[, 'depVar'] == 'lead_fh3', sample.size[3], pdta[, 'size']
)
pdta[, 'size'] <- ifelse(
  pdta[, 'depVar'] == 'lead_fh4', sample.size[4], pdta[, 'size']
)
pdta[, 'size'] <- ifelse(
  pdta[, 'depVar'] == 'lead_fh5', sample.size[5], pdta[, 'size']
)

## What is an adequate standardization?
p <- ggplot(
  data = pdta, 
  aes(x = absLossTrain/size, y = absLossTest/size)
) +
geom_point() +
labs(
  x = 'Within-Sample Absolute Loss',
  y = 'Out-of-Sample Absolute Loss'
) +
geom_text(aes(label = variable), size = 3) +
facet_wrap(~ depVar, nrow = 1) +
theme_bw() +
theme(
  legend.background = element_blank(),
  legend.direction = 'horizontal',
  legend.position = c(.27, 1.02),
  legend.background = element_rect(fill = 'transparent'),
  legend.key = element_blank(),
  panel.border = element_blank()
)
p

ggsave(
  plot = p, file = file.path(pathOut, 'figPointAbsLoss.pdf'),
  width = 7, height = 7/1.618, dpi = 1200, 
  family = 'serif'
)
rm(p, pdta)
## END